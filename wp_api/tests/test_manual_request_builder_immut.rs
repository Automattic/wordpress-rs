use integration_test_common::{
    AsyncWpNetworking, FIRST_USER_ID, SECOND_USER_ID, TEST_CREDENTIALS_ADMIN_PASSWORD,
    TEST_CREDENTIALS_ADMIN_USERNAME, TEST_CREDENTIALS_SITE_URL,
};
use reusable_test_cases::list_users_cases;
use rstest::*;
use rstest_reuse::{self, apply};
use std::sync::Arc;
use wp_api::{
    generate,
    users::UserWithEditContext,
    users::{
        UserListParams, WpApiParamUsersHasPublishedPosts, WpApiParamUsersOrderBy,
        WpApiParamUsersWho,
    },
    WpApiParamOrder, WpApiRequestBuilder, WpAuthentication,
};

pub mod integration_test_common;
pub mod reusable_test_cases;

#[apply(list_users_cases)]
#[tokio::test]
async fn list_users_with_edit_context(#[case] params: UserListParams) {
    let authentication = WpAuthentication::from_username_and_password(
        TEST_CREDENTIALS_ADMIN_USERNAME.to_string(),
        TEST_CREDENTIALS_ADMIN_PASSWORD.to_string(),
    );
    let async_wp_networking = Arc::new(AsyncWpNetworking::default());

    let request_builder = WpApiRequestBuilder::new(
        TEST_CREDENTIALS_SITE_URL.to_string(),
        authentication,
        // TODO: A request executor shouldn't be necessary, but we don't have a standalone request
        // builder yet
        async_wp_networking.clone(),
    )
    .expect("Site url is generated by our tooling");
    let wp_request = request_builder.users().list_with_edit_context(&params);
    let response = async_wp_networking.async_request(wp_request).await;
    let result = response.unwrap().parse::<Vec<UserWithEditContext>>();
    assert!(result.is_ok(), "Response was: '{:?}'", result);
}
