namespace wp_api {
};

[Trait]
interface PostNetworkingInterface {
  PostListResponse list(PostListRequest request);
  PostCreateResponse create(PostCreateRequest request);
  PostRetrieveResponse retrieve(PostRetrieveRequest request);
  PostUpdateResponse update(PostUpdateRequest request);
  PostDeleteResponse delete(PostDeleteRequest request);
};

[Trait]
interface PostResponseParser {
  ParsedPostListResponse list(PostListResponse response);
  ParsedPostCreateResponse create(PostCreateResponse response);
  ParsedPostRetrieveResponse retrieve(PostRetrieveResponse response);
  ParsedPostUpdateResponse update(PostUpdateResponse response);
  ParsedPostDeleteResponse delete(PostDeleteResponse response);
};

// https://developer.wordpress.org/rest-api/reference/posts/
// TODO: The schema and some of the action arguments for `/posts` endpoint has the notion of `context`.
// This is an `enum` value, but it can only contain partial values per field.
// This is an important design element to get right, because it's a common pattern for the API.
//
// IMPORTANT: This design does not include error handling yet!
interface PostRequestBuilder {
  constructor();

  PostListRequest list(PostListParams? params);
  PostCreateRequest create(PostCreateParams? params);
  PostRetrieveRequest retrieve(u32 post_id, PostRetrieveParams? params);
  PostUpdateRequest update(u32 post_id, PostUpdateParams? params);
  PostDeleteRequest delete(u32 post_id, PostDeleteParams? params);
};

dictionary PostListResponse {};
dictionary PostCreateResponse {};
dictionary PostRetrieveResponse {};
dictionary PostUpdateResponse {};
dictionary PostDeleteResponse {};

dictionary ParsedPostListResponse {
  sequence<PostObject>? post_list;
};
dictionary ParsedPostCreateResponse {
  PostObject? post;
};
dictionary ParsedPostRetrieveResponse {
  PostObject? post;
};
dictionary ParsedPostUpdateResponse {
  PostObject? post;
};
dictionary ParsedPostDeleteResponse {
  PostObject? post;
};

dictionary PostObject {
  u32? id;
  string? title;
  string? content;
};

dictionary PostListRequest {
  string? params;
};

dictionary PostCreateRequest {
  string? params;
};

dictionary PostRetrieveRequest {
  string? params;
};

dictionary PostUpdateRequest {
  string? params;
};

dictionary PostDeleteRequest {
  string? params;
};

// We should check if it's possible to use the same params for update & create
dictionary PostCreateParams {
  string? title;
  string? content;
};

dictionary PostListParams {
  u32? page;
  u32? per_page;
};

dictionary PostRetrieveParams {
  string? password;
};

dictionary PostUpdateParams {
  string? title;
  string? content;
};

dictionary PostDeleteParams {
  boolean? force;
};

// ---------------------------------------------------------------------------

interface PageRequestBuilder {
  PageRequest list(PageListParams? params);
};

dictionary PageRequest {
  string endpoint;
  string? params;
};

dictionary PageListParams {
  u32? page;
  u32? per_page;
};
