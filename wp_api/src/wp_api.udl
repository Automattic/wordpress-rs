namespace wp_api {
};

[Error]
interface WPApiError {
    AuthenticationError(string message);
    NotFoundError(string message);
    ValidationError(string message);
    InvalidResponseError(string message);
};

[Trait]
interface WPNetworkingInterface {
  WPNetworkResponse request(WPNetworkRequest request);
};

dictionary WPAuthentication {
  string auth_token;
};

// https://developer.wordpress.org/rest-api/reference/posts/
// TODO: The schema and some of the action arguments for `/posts` endpoint has the notion of `context`.
// This is an `enum` value, but it can only contain partial values per field.
// This is an important design element to get right, because it's a common pattern for the API.
//
// IMPORTANT: This design does not include error handling yet!
[Trait]
interface WPApiInterface {
  [Throws=WPApiError]
  PostListResponse list_posts(PostListParams? params);
  PostCreateResponse create_post(PostCreateParams? params);
  PostRetrieveResponse retrieve_post(u32 post_id, PostRetrieveParams? params);
  PostUpdateResponse update_post(u32 post_id, PostUpdateParams? params);
  PostDeleteResponse delete_post(u32 post_id, PostDeleteParams? params);

  PageListResponse list_pages(PageListParams? params);
};

enum RequestMethod {
  "GET",
  "POST",
  "PUT",
  "DELETE"
};

dictionary WPNetworkRequest {
  RequestMethod method;
  string url;
  record<string, string>? header_map;
};

[Trait]
interface NetworkResponseStatus {
    boolean is_informational();
    boolean is_success();
    boolean is_redirection();
    boolean is_client_error();
    boolean is_server_error();
};

dictionary WPNetworkResponse {
  bytes body;
  NetworkResponseStatus status;
};

dictionary PostListResponse {
  sequence<PostObject>? post_list;
};
dictionary PostCreateResponse {
  PostObject? post;
};
dictionary PostRetrieveResponse {
  PostObject? post;
};
dictionary PostUpdateResponse {
  PostObject? post;
};
dictionary PostDeleteResponse {
  PostObject? post;
};

dictionary PostObject {
  u32? id;
  PostTitle? title;
  PostContent? content;
};

dictionary PostTitle {
  string? raw;
  string? rendered;
};

dictionary PostContent {
  string? raw;
  string? rendered;
};

// We should check if it's possible to use the same params for update & create
dictionary PostCreateParams {
  string? title;
  string? content;
};

dictionary PostListParams {
  u32? page;
  u32? per_page;
};

dictionary PostRetrieveParams {
  string? password;
};

dictionary PostUpdateParams {
  string? title;
  string? content;
};

dictionary PostDeleteParams {
  boolean? force;
};

// ---------------------------------------------------------------------------

dictionary PageListParams {
  u32? page;
  u32? per_page;
};

dictionary PageListResponse {
  sequence<PageObject>? page_list;
};

dictionary PageObject {
  u32? id;
  string? title;
  string? content;
};
