# frozen_string_literal: true

PROJECT_ROOT = File.expand_path('..', __dir__)

LANE_VALUE_VERSION = 'WP_VERSION'
LANE_VALUE_GITHUB_TOKEN = 'WP_GITHUB_TOKEN'
LANE_VALUE_XCFRAMEWORK = 'WP_XCFRAMEWORK'
LANE_VALUE_XCFRAMEWORK_CHECKSUM = 'WP_XCFRAMEWORK_CHECKSUM'
LANE_VALUE_XCFRAMEWORK_CHECKSUM_PATH = 'WP_XCFRAMEWORK_CHECKSUM_PATH'

GITHUB_REPO = 'automattic/wordpress-rs'
GIT_REMOTE_NAME = 'origin'

lane :release do |options|
  version = options[:version] || UI.user_error!('version is required')
  lane_context[LANE_VALUE_VERSION] = version

  github_token = options[:github_token] || ENV['GITHUB_TOKEN'] || UI.user_error!('github_token is required')
  lane_context.set_sensitive(LANE_VALUE_GITHUB_TOKEN, github_token)

  validate
  update_swift_package
  publish_github_release
  publish_to_s3
end

lane :validate do
  version = lane_context[LANE_VALUE_VERSION] || UI.user_error!('Missing version lane context')
  github_token = lane_context[LANE_VALUE_GITHUB_TOKEN] || UI.user_error!('Missing github token lane context')

  UI.user_error!("Release #{version} already exists in the GitHub repo") \
    unless get_github_release(url: GITHUB_REPO, version: version, api_token: github_token).nil?
  remove_lane_context_values [
    SharedValues::GITHUB_API_RESPONSE,
    SharedValues::GITHUB_API_STATUS_CODE,
    SharedValues::GITHUB_API_JSON
  ]

  UI.user_error!("Tag #{version} already exists in the GitHub repo") \
    if git_tag_exists(tag: version, remote: true, remote_name: GIT_REMOTE_NAME)
end

lane :update_swift_package do
  version = lane_context[LANE_VALUE_VERSION] || UI.user_error!('Missing version lane context')

  file_path = File.expand_path('./Package.swift', PROJECT_ROOT)
  lines = File.readlines(file_path).map do |line|
    if line.start_with?('let libwordpressFFIVersion: WordPressRSVersion =')
      "let libwordpressFFIVersion: WordPressRSVersion = .release(version: \"#{version}\", checksum: \"#{xcframework_checksum}\")"
    else
      line
    end
  end
  File.open(file_path, 'w') { |file| file.puts lines }
end

lane :publish_github_release do
  version = lane_context[LANE_VALUE_VERSION] || UI.user_error!('Missing version lane context')
  github_token = lane_context[LANE_VALUE_GITHUB_TOKEN] || UI.user_error!('Missing github token lane context')

  # Create a new branch to commit the Package.swift changes.
  # Please note, the new commit is tagged and pushed to the remote. The new branch
  # is not pushed to the remote and can be discarded.
  sh "git checkout -b release/#{version}"
  git_commit(
    path: File.expand_path('./Package.swift', PROJECT_ROOT),
    message: "Update Package.swift to use version #{version}"
  )

  git_add(path: xcframework_bindings_file_path, force: true)
  git_commit(
    path: xcframework_bindings_file_path,
    message: "Commit Swift Bindings for version #{version}"
  )
  push_to_git_remote(tags: false)

  add_git_tag(tag: version)
  push_git_tags(tag: version, remote: GIT_REMOTE_NAME)
  set_github_release(
    api_token: github_token,
    repository_name: GITHUB_REPO,
    name: version,
    tag_name: version,
    description: "Release version #{version}",
    upload_assets: [xcframework_file_path, xcframework_checksum_file_path]
  )
end

lane :publish_to_s3 do
  version = lane_context[LANE_VALUE_VERSION] || UI.user_error!('Missing version lane context')

  upload_to_s3(
    bucket: 'a8c-apps-public-artifacts',
    key: File.join('wordpress-rs', version, File.basename(xcframework_file_path)),
    file: xcframework_file_path,
    auto_prefix: false,
    if_exists: :fail
  )

  upload_to_s3(
    bucket: 'a8c-apps-public-artifacts',
    key: File.join('wordpress-rs', version, File.basename(xcframework_checksum_file_path)),
    file: xcframework_checksum_file_path,
    auto_prefix: false,
    if_exists: :fail
  )
end

def xcframework_checksum
  File.read(xcframework_checksum_file_path).strip!
end

def xcframework_checksum_file_path
  File.join(PROJECT_ROOT, 'libwordpressFFI.xcframework.zip.checksum.txt')
end

def xcframework_file_path
  File.join(PROJECT_ROOT, 'libwordpressFFI.xcframework.zip')
end

def xcframework_bindings_file_path
  File.join(PROJECT_ROOT, 'native', 'swift', 'Sources', 'wordpress-api-wrapper', 'wp_api.swift')
end

def remove_lane_context_values(names)
  names.each { |name| lane_context.delete(name) }
end
