plugins {
    id("com.android.library")
    id("org.jetbrains.kotlin.android")
    id("org.mozilla.rust-android-gradle.rust-android")
    id("com.automattic.android.publish-to-s3")
}

apply from: 'uniffi.gradle'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

android {
    namespace = "rs.wp_api"

    compileSdk = 33

    defaultConfig {
        minSdk = 24

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            debugSymbolLevel 'FULL'
        }
    }

    sourceSets {
        androidTest.jniLibs.srcDirs += "$buildDir/rustJniLibs/android"
    }

    packagingOptions {
        doNotStrip "**/*.so"
    }
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    implementation "net.java.dev.jna:jna:5.13.0@aar"
    androidTestImplementation "net.java.dev.jna:jna:5.13.0@aar"

    androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation "androidx.test:rules:1.4.0"
    androidTestImplementation "junit:junit:4.13.2"

    testImplementation "junit:junit:4.13.2"
    testImplementation "net.java.dev.jna:jna:5.13.0"
}

cargo {
    module  = "../../../wp_api/"
    libname = "wp_api"
    profile = "release"
    targets = ["arm", "arm64", "x86", "x86_64", getNativeRustTarget()]
    targetDirectory = '../../../target'

    exec { spec, toolchain ->
        // https://doc.rust-lang.org/rustc/command-line-arguments.html#-g-include-debug-information
        spec.environment("RUSTFLAGS", "-g")
    }
}

project.afterEvaluate {
    publishing {
        publications {
            MavenPublication(MavenPublication) {
                from components.release

                groupId "org.wordpress"
                artifactId "rs"
                // version is set by 'publish-to-s3' plugin
            }
        }
   }
}

tasks.matching { it.name.matches(/merge.*JniLibFolders/) }.configureEach {
    it.inputs.dir(new File(buildDir, "rustJniLibs/android"))
    it.dependsOn("cargoBuild")
}

tasks.matching { it.name.matches("test") }.configureEach {
    it.dependsOn("cargoBuild")
}

ext.configureUniFFIBindgen("../../../target/release/libwp_api.dylib")

def getNativeRustTarget() {
    // This seems to return 'darwin' for both Apple Silicon and Intel architectures
    // We don't use Intel macs anymore, so we should default to 'darwin-aarch64'
    switch (com.sun.jna.Platform.RESOURCE_PREFIX) {
        case 'darwin':
        case 'darwin-aarch64':
            return 'darwin-aarch64'
        case 'darwin-x86-64':
            return 'darwin-x86-64'
        case 'linux-x86-64':
            return 'linux-x86-64'
        case 'win32-x86-64':
            return 'win32-x86-64-gnu'
    }
}
