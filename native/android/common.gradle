// Adopted from https://github.com/mozilla/application-services/blob/v120.0.1/publish.gradle#L206-L226
//
// A convenience function for configuring a `uniffi-bindgen` task,
// with appropriate dependency info. This will call `uniffi-bindgen`
// for the provided `moduleName`'s `.dylib` file in order to generate Kotlin language bindings
ext.configureUniFFIBindgen = { moduleName ->
    def cargoProjectRoot = "${project.rootDir}/../.."
    def cargoBuildLibraryReleaseTask = tasks.register("cargoBuildLibraryRelease", Exec) {
        workingDir cargoProjectRoot
        commandLine 'cargo', 'build', '--package', moduleName, '--release'
        // No inputs.dir added, because we want to always re-run this task and let Cargo handle caching
    }

    def uniffiGeneratedPath = "$buildDir/generated/source/uniffi/java"
    def dylibFilePath = "$cargoProjectRoot/target/release/lib${moduleName}.dylib"
    def taskName = "generate_${moduleName}_UniFFIBindings"
    tasks.register(taskName, Exec) {
        dependsOn cargoBuildLibraryReleaseTask
        workingDir project.rootDir
        commandLine 'cargo', 'run', '--release', '--bin', 'wp_uniffi_bindgen', 'generate', '--library', dylibFilePath, '--out-dir', uniffiGeneratedPath, '--language', 'kotlin'
        outputs.dir uniffiGeneratedPath
        // Re-generate if the interface definition changes.
        inputs.file dylibFilePath
        // Re-generate if our uniffi-bindgen tooling changes.
        inputs.dir "$cargoProjectRoot/wp_uniffi_bindgen/"
        // Re-generate if our uniffi-bindgen version changes.
        inputs.file "$cargoProjectRoot/Cargo.lock"
        // Re-generate if the module source code changes
        inputs.dir "$cargoProjectRoot/${moduleName}/"
    }
    taskName
}

ext.setupCargo = { moduleName, nativeRustTarget ->
    cargo {
        module  = "../../../$moduleName/"
        libname = moduleName
        profile = "release"
        targets = ["arm", "arm64", "x86", "x86_64", nativeRustTarget]
        targetDirectory = '../../../target'

        exec { spec, toolchain ->
            // https://doc.rust-lang.org/rustc/command-line-arguments.html#-g-include-debug-information
            spec.environment("RUSTFLAGS", "-g")
        }
    }
    tasks.matching { it.name.matches(/merge.*JniLibFolders/) }.configureEach {
        it.inputs.dir(new File(buildDir, "rustJniLibs/android"))
        it.dependsOn("cargoBuild")
    }

    tasks.matching { it.name.matches("test") }.configureEach {
        it.dependsOn("cargoBuild")
    }
}

ext.getNativeRustTarget = { resourcePrefix ->
    switch (resourcePrefix) {
        case 'darwin':
            // For unit tests to work in Apple Silicon, we need to return 'darwin-aarch64' here
            // However, that runs the cargo task as `cargoBuildDarwin-aarch64` which is not properly
            // cached by cargo and requires a rebuild every time. This results in a significant
            // development time loss, so for now, we are returning 'darwin' and using instrumented
            // tests instead.
            // return 'darwin-aarch64'
            return 'darwin'
        case 'darwin-aarch64':
            return 'darwin-aarch64'
        case 'darwin-x86-64':
            return 'darwin-x86-64'
        case 'linux-x86-64':
            return 'linux-x86-64'
        case 'win32-x86-64':
            return 'win32-x86-64-gnu'
    }
}

ext.readTestCredentialsFromFile = {
    def lines = rootProject.file("../../test_credentials").text.readLines()
    // https://developer.android.com/studio/run/emulator-networking
    def siteUrl = lines[0] == "http://localhost" ? "http://10.0.2.2" : lines[0]
    new TestCredentials(
        siteUrl: siteUrl,
        adminUsername: lines[1],
        adminPassword: lines[2],
        subscriberUsername: lines[3],
        subscriberPassword: lines[4]
    )
}

class TestCredentials {
    String siteUrl
    String adminUsername
    String adminPassword
    String subscriberUsername
    String subscriberPassword
}
