plugins {
    id("java-library")
    id("org.jetbrains.kotlin.jvm")
}

ext.jniLibsPath = "${buildDir}/jniLibs/"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "net.java.dev.jna:jna:$jnaVersion"

    testImplementation "junit:junit:$junitVersion"
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
}

sourceSets {
    main {
        java {
            srcDir "${buildDir}/generated/source/uniffi/java/uniffi"
        }
    }
    test {
        resources {
            srcDir project.ext.jniLibsPath
        }
    }
}

setupJniAndBindings()

// Separated as a function to have everything in a scope and keep it contained
def setupJniAndBindings() {
    def moduleName = "wp_api"
    def cargoProjectRoot = "${project.rootDir}/../.."
    def cargoTargetPath = "$cargoProjectRoot/target/release"
    def dylibFilePath = "$cargoTargetPath/lib${moduleName}.dylib"
    def uniffiGeneratedPath = "$buildDir/generated/source/uniffi/java"

    def cargoBuildLibraryReleaseTask = tasks.register("cargoBuildLibraryRelease", Exec) {
        workingDir cargoProjectRoot
        commandLine 'cargo', 'build', '--package', moduleName, '--release'
        // No inputs.dir added, because we want to always re-run this task and let Cargo handle caching
    }

    def generateUniFFIBindingsTask = tasks.register("generate_${moduleName}_UniFFIBindings", Exec) {
        dependsOn cargoBuildLibraryReleaseTask
        workingDir project.rootDir
        commandLine 'cargo', 'run', '--release', '--bin', 'wp_uniffi_bindgen', 'generate', '--library', dylibFilePath, '--out-dir', uniffiGeneratedPath, '--language', 'kotlin'
        outputs.dir uniffiGeneratedPath
        // Re-generate if the interface definition changes.
        inputs.file dylibFilePath
        // Re-generate if our uniffi-bindgen tooling changes.
        inputs.dir "$cargoProjectRoot/wp_uniffi_bindgen/"
        // Re-generate if our uniffi-bindgen version changes.
        inputs.file "$cargoProjectRoot/Cargo.lock"
        // Re-generate if the module source code changes
        inputs.dir "$cargoProjectRoot/${moduleName}/"
    }

    tasks.named("compileKotlin").configure {
        dependsOn generateUniFFIBindingsTask
    }
    def copyDesktopJniLibsTask = tasks.register("copyDesktopJniLibs", Copy) {
        dependsOn cargoBuildLibraryReleaseTask
        from dylibFilePath
        into project.ext.jniLibsPath
    }
    tasks.named("processTestResources").configure {
        dependsOn copyDesktopJniLibsTask
    }
}
