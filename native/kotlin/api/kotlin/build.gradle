plugins {
    id("java-library")
    id("org.jetbrains.kotlin.jvm")
    id("jvm-test-suite")
    id("com.automattic.android.publish-to-s3")
}

ext.jniLibsPath = "${buildDir}/jniLibs/"
ext.generatedTestResourcesPath = "${buildDir}/generatedTestResources/"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

testing {
    suites {
        configureEach {
            useJUnit(junitVersion)
        }

        integrationTest(JvmTestSuite) {
            testType = TestSuiteType.INTEGRATION_TEST

            dependencies {
                implementation project()

                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinxCoroutinesVersion"
            }

            targets {
                configureEach {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

tasks.named('check') {
    dependsOn(testing.suites.integrationTest)
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "net.java.dev.jna:jna:$jnaVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxCoroutinesVersion"
}

sourceSets {
    main {
        java {
            srcDir "${buildDir}/generated/source/uniffi/java/uniffi"
        }
    }
    integrationTest {
        resources {
            srcDir project.ext.jniLibsPath
            srcDir project.ext.generatedTestResourcesPath
        }
    }
}

setupJniAndBindings()

// Separated as a function to have everything in a scope and keep it contained
def setupJniAndBindings() {
    def moduleName = "wp_api"
    def nativeLibraryPath = "$cargoProjectRoot/target/release/lib${moduleName}${getNativeLibraryExtension()}"
    def uniffiGeneratedPath = "$buildDir/generated/source/uniffi/java"

    def cargoBuildLibraryReleaseTask = tasks.register("cargoBuildLibraryRelease", Exec) {
        workingDir cargoProjectRoot
        commandLine 'cargo', 'build', '--package', moduleName, '--release'
        // No inputs.dir added, because we want to always re-run this task and let Cargo handle caching
    }

    def generateUniFFIBindingsTask = tasks.register("generate_${moduleName}_UniFFIBindings", Exec) {
        dependsOn cargoBuildLibraryReleaseTask
        workingDir project.rootDir
        commandLine 'cargo', 'run', '--release', '--bin', 'wp_uniffi_bindgen', 'generate', '--library', nativeLibraryPath, '--out-dir', uniffiGeneratedPath, '--language', 'kotlin'
        outputs.dir uniffiGeneratedPath
        // Re-generate if the interface definition changes.
        inputs.file nativeLibraryPath
        // Re-generate if our uniffi-bindgen tooling changes.
        inputs.dir "$cargoProjectRoot/wp_uniffi_bindgen/"
        // Re-generate if our uniffi-bindgen version changes.
        inputs.file "$cargoProjectRoot/Cargo.lock"
        // Re-generate if the module source code changes
        inputs.dir "$cargoProjectRoot/${moduleName}/"
    }

    tasks.named("compileKotlin").configure {
        dependsOn generateUniFFIBindingsTask
    }
    def copyDesktopJniLibsTask = tasks.register("copyDesktopJniLibs", Copy) {
        dependsOn cargoBuildLibraryReleaseTask
        from nativeLibraryPath
        into project.ext.jniLibsPath
    }
    def copyTestCredentialsTask = tasks.register("copyTestCredentials", Copy) {
        from "$cargoProjectRoot/test_credentials"
        into project.ext.generatedTestResourcesPath
    }
    tasks.named("processIntegrationTestResources").configure {
        dependsOn copyDesktopJniLibsTask
        dependsOn copyTestCredentialsTask
    }
}

project.afterEvaluate {
    publishing {
        publications {
            MavenPublication(MavenPublication) {
                from components.java

                groupId "rs.wordpress.api"
                artifactId "kotlin"
                // version is set by 'publish-to-s3' plugin
            }
        }
   }
}

def getNativeLibraryExtension() {
    def currentOS = org.gradle.internal.os.OperatingSystem.current()
    if (currentOS.isLinux()) {
        ".so"
    } else if (currentOS.isMacOsX()) {
        ".dylib"
    } else {
        throw new GradleException("Unsupported Operating System: $currentOS")
    }
}
